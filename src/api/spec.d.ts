/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get your account details
         * @description Get your account details
         *     - **id**: Your account ID
         *     - **name**: Your full name
         *     - **current_plan**: Your current plan
         *     - **plan_expiry_date**: Your plan expiry date
         *     - **current_rpm**: Your current RPM
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status?: boolean;
                            message?: string;
                            result?: {
                                /** @default  */
                                id: string;
                                /** @default  */
                                name: string;
                                /** @default  */
                                current_plan: string;
                                /** @default  */
                                plan_expiry_date: string;
                                /** @default 0 */
                                current_rpm: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if the server is running */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status?: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test route, don't call this endpoint */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/differentMe/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate image with different style */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Initial image to be processed.
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                        /**
                         * @description Style id to be applied.
                         * @enum {unknown}
                         */
                        style_id: "animal_fest" | "old" | "doll" | "metal" | "8bit" | "city" | "blazing_torch" | "clay" | "realism" | "simulife" | "clay_r" | "sketch" | "zombie" | "oil_stick" | "balloon" | "pipe_craft" | "crystal" | "metal_r" | "felt" | "jade" | "balloon_r" | "jade_r" | "old_r" | "pink_girl" | "doll_r" | "city_r" | "blazing_torch_r" | "realism_r" | "vivid" | "eastern" | "mythical" | "animal_fest_r" | "ps2" | "pixel_game" | "league" | "lineage" | "fantasy" | "gta" | "simulife_r" | "zombie_r" | "persona" | "happiness" | "manga" | "sweet" | "pixel_art" | "catwoman" | "loose" | "sakura" | "pocket" | "grains" | "graduation" | "sketch_r" | "oil_pastel" | "flora_tour" | "loong_year" | "figure" | "prospera" | "guardians" | "expedition" | "leisure" | "giftify" | "amiable" | "3d_cartoon" | "sketch_ii" | "collage" | "sketch_ii_r" | "mini_doll" | "sketchresize" | "cartoon" | "fluffy" | "insta" | "local_graffiti" | "peking_opera" | "opera" | "torch" | "sport" | "dunk";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description Task id, if you want to query the task status, you need to use this id. */
                                task_id: string;
                                /**
                                 * @description Task status, if the status is completed, you can get the result.
                                 * @enum {unknown}
                                 */
                                status: "completed" | "processing" | "error";
                                /** @description Generated images, if the status is completed. */
                                images?: string | string[] | null;
                                /** @description Backend processing time in milliseconds. */
                                backend_processing_time?: number;
                                /** @description Error message if the status is error. */
                                error_msg?: string | null;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/differentMe/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of the task */
        get: {
            parameters: {
                query: {
                    /** @description Task id to be queried. */
                    task_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description Task id, if you want to query the task status, you need to use this id. */
                                task_id: string;
                                /**
                                 * @description Task status, if the status is completed, you can get the result.
                                 * @enum {unknown}
                                 */
                                status: "completed" | "processing" | "error";
                                /** @description Generated images, if the status is completed. */
                                images?: string | string[] | null;
                                /** @description Backend processing time in milliseconds. */
                                backend_processing_time?: number;
                                /** @description Error message if the status is error. */
                                error_msg?: string | null;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/differentMe/styles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the id of available styles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                styles?: string[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gpt/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Chat with GPT */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default gpt-3.5-turbo */
                        model?: string;
                        /** @example [
                         *       {
                         *         "role": "user",
                         *         "content": "Define love in simple way",
                         *         "name": "Frieren"
                         *       }
                         *     ] */
                        messages?: {
                            /** @enum {string} */
                            role: "assistant" | "user" | "system" | "tool" | "function";
                            content?: string | Record<string, never>;
                            name?: string;
                        }[];
                        /** @example [
                         *       "brainly"
                         *     ] */
                        internal_functions?: string[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                model?: string;
                                message?: {
                                    /** @enum {string} */
                                    role?: "assistant" | "user" | "function";
                                    content?: string;
                                    function_call?: {
                                        name?: string;
                                        arguments?: string;
                                    } & {
                                        [key: string]: unknown;
                                    };
                                };
                                functions?: {
                                    [key: string]: unknown;
                                }[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gpt/vision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Chat with GPT Vision */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** @default {"model":"gpt-4o-mini","messages":[{"role":"user","content":"Give me a description of this image"}]} */
                        data: string;
                        /** Format: binary */
                        image: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                model?: string;
                                message?: {
                                    /** @enum {string} */
                                    role?: "assistant" | "user" | "function";
                                    content?: string;
                                };
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image/colorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Automatically add realistic color to black-and-white images.
         * @description
         *     **Uses advanced colorization algorithms to transform black-and-white or grayscale images into vibrant, full-color versions.**
         *
         *     - **Intelligently applies color to enhance photos**
         *     - **Preserves original details and textures**
         *     - **Supports various image formats**
         *
         *     Ideal for restoring old photos, enhancing grayscale images, and creating dynamic visual content.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                images?: string[];
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image/enhance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Quickly enhance image clarity by transforming blurry photos into clearer visuals.
         * @description
         *     **Offers a fast, efficient solution for improving image clarity, designed to transform slightly blurry or low-quality photos into clearer images.**
         *
         *     - **Uses lightweight processing techniques**
         *     - **Delivers instant clarity enhancements**
         *     - **Supports common image formats**
         *
         *     Ideal for real-time applications where speed is prioritized over in-depth detail recovery, such as e-commerce, social media, and general content improvement.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                images?: string[];
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image/gfp_superres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enhance image resolution and clarity with advanced super-resolution processing.
         * @description
         *     **Utilizes cutting-edge super-resolution algorithms to upscale and enhance the quality of images, revealing finer details and providing a clearer, more detailed version of the original.**
         *
         *     - **Ideal for applications where high-resolution images are essential**
         *     - **Supports e-commerce, digital media, and scientific imaging**
         *
         *     Provides a fast, efficient solution for improving image clarity and resolution.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @description The initial image URL to be scaled
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                        /**
                         * @description The scale factor to be applied
                         * @default 2
                         */
                        outscale?: number;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description The scaled image URL */
                                images?: string[];
                                /** @description The backend processing time in milliseconds */
                                backend_processing_time?: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image/rembg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Automatically remove the background from your images, isolating the main subject with precision.
         * @description
         *     **Provides an efficient solution for removing backgrounds from images, making it easy to isolate the primary subject.**
         *
         *     - **Leverages advanced image processing algorithms**
         *     - **Identifies and separates the foreground from the background**
         *     - **Supports common image formats**
         *     - **Processes images in real time**
         *
         *     Ideal for professional use cases, including e-commerce product images, profile pictures, marketing assets, and more.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                images?: string[];
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image/unblur": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Instantly unblur and sharpen your image (*face) for enhanced clarity.
         * @description
         *     **Enhances image clarity by applying advanced unblurring and sharpening algorithms to restore detail to photos affected by motion blur, focus issues, or low-quality capture.**
         *
         *     - **Supports common image formats**
         *     - **Performs real-time processing**
         *     - **Delivers a sharper, clearer image almost instantly**
         *     - **Advanced pipeline for optimal results**
         *
         *     Perfect for applications where clear, high-quality images are essential, such as e-commerce, document processing, and photography.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example https://scdn.lovita.io/rose_ayank_david.jpg */
                        init_image: string;
                        pipeline?: {
                            /**
                             * @default background_blur_low
                             * @enum {string}
                             */
                            bokeh?: "background_blur_low" | "background_blur_medium" | "background_blur_high";
                            /**
                             * @default prism-blend
                             * @enum {string}
                             */
                            color_enhance?: "prism-blend" | "prism-expert-a" | "prism-expert-c" | "muted" | "orange-teal" | "silky" | "lit_soft_warm" | "orange-teal_v2";
                            /**
                             * @default shiba-strong-tensorrt
                             * @enum {string}
                             */
                            background_enhance?: "shiba-strong-tensorrt" | "rhino-tensorrt" | "upsampler-bicubic";
                            /**
                             * @default pinko_bigger_dataset-style
                             * @enum {string}
                             */
                            face_lifting?: "pinko_bigger_dataset-style" | "movie-style" | "marzipan-style";
                            /**
                             * @default recommender_entire_dataset
                             * @enum {string}
                             */
                            face_enhance?: "recommender_entire_dataset" | "remini";
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                images?: string[];
                                pipeline?: {
                                    [key: string]: unknown;
                                };
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instagram/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metadata and content urls of an Instagram post */
        get: {
            parameters: {
                query: {
                    /** @description Instagram post/reel or any intagram content URL */
                    url: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description Content creator username */
                                username?: string | null;
                                /** @description Content title */
                                title?: string;
                                /** @description Content metadata */
                                metadata?: {
                                    /** @description Content source */
                                    source?: string;
                                    /** @description Content shortcode */
                                    shortcode?: string;
                                    /** @description Content comment count */
                                    comment_count?: number;
                                    /** @description Content like count */
                                    like_count?: number;
                                    /** @description Content taken at */
                                    taken_at?: number;
                                    /** @description Content comments */
                                    comments?: {
                                        /** @description Commenter username */
                                        username?: string;
                                        /** @description Comment text */
                                        text?: string;
                                    }[];
                                };
                                contents?: {
                                    type?: string;
                                    ext?: string;
                                    url?: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instagram/get_content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get only the content url of an Instagram post */
        get: {
            parameters: {
                query: {
                    /** @description Instagram post/reel or any intagram content URL */
                    url: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description Content URLs */
                                contents?: string[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suno/advance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an advanced generation */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example ItsRose API Anthem */
                        title: string;
                        /** @example metal metalcore male mashup */
                        tags: string;
                        /** @default  */
                        negative_tags?: string;
                        /** @example [Verse]
                         *     Hush now little coder sleep
                         *     With ItsRose your dreams will keep
                         *     In the world where data flows
                         *     Peaceful thoughts will decompose
                         *
                         *     [Verse]
                         *     Servers hum a soft refrain
                         *     Python scripts like gentle rain
                         *     Any bug will drift away
                         *     In this night your worries sway
                         *
                         *     [Chorus]
                         *     Dreams of restful APIs
                         *     Clouds of code that touch the skies
                         *     In the night so calm and free
                         *     ItsRose brings sweet harmony
                         *
                         *     [Verse]
                         *     Rest your weary head tonight
                         *     Syntax errors out of sight
                         *     Sleep so deep in comfort sweet
                         *     Trust in Rose your dreams complete
                         *
                         *     [Verse]
                         *     Fields of JSON softly glow
                         *     Where the restful call trees grow
                         *     In the silence of the stars
                         *     Code will weave a lull of bars
                         *
                         *     [Chorus]
                         *     Dreams of restful APIs
                         *     Clouds of code that touch the skies
                         *     In the night so calm and free
                         *     ItsRose brings sweet harmony */
                        prompt: string;
                        /** @default false */
                        instrumental?: boolean;
                        /**
                         * @default chirp-v3-0
                         * @enum {unknown}
                         */
                        model?: "chirp-v3-0";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                id?: string;
                                status?: string;
                                created_at?: string;
                                prompt_description?: string;
                                output?: {
                                    image_thumb?: string;
                                    audio?: string;
                                    video?: string;
                                };
                                meta?: {
                                    /** @default  */
                                    title: string;
                                    /** @default  */
                                    tags: string;
                                    model?: string;
                                    /** @default  */
                                    lyric: string;
                                    /** @default gen */
                                    type: string;
                                    /** @default 0 */
                                    duration: number;
                                };
                                error?: {
                                    type?: string;
                                    message?: string;
                                } | null;
                            }[];
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suno/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch a result
         * @description Fetch a result by ids, separated by comma. **Be careful with the rate limit.**
         */
        get: {
            parameters: {
                query: {
                    /** @description Seperate id by comma */
                    ids: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                id?: string;
                                status?: string;
                                created_at?: string;
                                prompt_description?: string;
                                output?: {
                                    image_thumb?: string;
                                    audio?: string;
                                    video?: string;
                                };
                                meta?: {
                                    /** @default  */
                                    title: string;
                                    /** @default  */
                                    tags: string;
                                    model?: string;
                                    /** @default  */
                                    lyric: string;
                                    /** @default gen */
                                    type: string;
                                    /** @default 0 */
                                    duration: number;
                                };
                                error?: {
                                    type?: string;
                                    message?: string;
                                } | null;
                            }[];
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suno/generate_lyric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a lyric */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example ItsRose API, cloud in the sky, female groups medieval acoustic guitar only */
                        prompt: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                title?: string;
                                lyric?: string;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suno/limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** See limits quota */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                __name?: string;
                                __sub_periode?: string;
                                limits?: number;
                                credits?: number;
                                usage?: number;
                            }[];
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suno/simple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a simple generation */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example ItsRose API Anthem, heavy metal song */
                        prompt: string;
                        /** @default false */
                        instrumental?: boolean;
                        /**
                         * @default chirp-v3-0
                         * @enum {unknown}
                         */
                        model?: "chirp-v3-0";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                id?: string;
                                status?: string;
                                created_at?: string;
                                prompt_description?: string;
                                output?: {
                                    image_thumb?: string;
                                    audio?: string;
                                    video?: string;
                                };
                                meta?: {
                                    /** @default  */
                                    title: string;
                                    /** @default  */
                                    tags: string;
                                    model?: string;
                                    /** @default  */
                                    lyric: string;
                                    /** @default gen */
                                    type: string;
                                    /** @default 0 */
                                    duration: number;
                                };
                                error?: {
                                    type?: string;
                                    message?: string;
                                } | null;
                            }[];
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translate/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detect the language of a text */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The text to detect
                         * @example Hello, world!
                         */
                        text: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description The detected language */
                                lang?: string;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translate/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of supported languages */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description The supported languages */
                                langs?: string[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translate/predict": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Predict the translation of a text */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The text to predict
                         * @example Hello, world!
                         */
                        text: string;
                        /**
                         * @description The target language
                         * @example id
                         */
                        target_lang: string;
                        /**
                         * @description The source language
                         * @default auto
                         */
                        source_lang?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description The translated text */
                                text?: string;
                                /** @description The detected language */
                                lang?: string;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnMe/age": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transform face age */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                        age: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @default  */
                                age: string;
                                images?: string[];
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnMe/expression": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transform face expression */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                        expression: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @default  */
                                expression: string;
                                images?: string[];
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnMe/makeup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy makeup from reference image */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/makeup/makeup_1.jpg
                         */
                        reference_image: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                reference_image?: string;
                                images?: string[];
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnMe/styles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get TurnMe Styles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @example [
                                 *       "anime",
                                 *       "...",
                                 *       "other"
                                 *     ] */
                                transform?: string[];
                                /** @example [
                                 *       "sad",
                                 *       "...",
                                 *       "other"
                                 *     ] */
                                expression?: string[];
                                /** @example [
                                 *       "child",
                                 *       "...",
                                 *       "other"
                                 *     ] */
                                age?: string[];
                                /** @example [
                                 *       "https://scdn.lovita.io/makeup/makeup_1.jpg",
                                 *       "...",
                                 *       "https://scdn.lovita.io/makeup/makeup_9.jpg"
                                 *     ] */
                                makeup_reference?: string[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnMe/transform": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transform image */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: url
                         * @example https://scdn.lovita.io/rose_ayank_david.jpg
                         */
                        init_image: string;
                        /** @default  */
                        prompt?: string;
                        style_id: string;
                        /** @default 1 */
                        num_image?: number;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @default  */
                                style_id: string;
                                images?: string[];
                                /** @default 0 */
                                backend_processing_time: number;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/voicevox/audio_query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a text-to-speech query
         * @description Get the initial value of the query. The resulting query can be used directly for speech synthesis.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Text to be synthesized */
                        text: string;
                        /** @description Speaker id */
                        speaker: number;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description List of accented phrases */
                                accent_phrases: {
                                    /** @description Mora's List */
                                    moras: {
                                        text: string;
                                        consonant: unknown | string;
                                        consonant_length: unknown | number;
                                        vowel: string;
                                        vowel_length: number;
                                        pitch: number;
                                    }[];
                                    /** @description Accent position */
                                    accent: number;
                                    /**
                                     * @description Information per mora (consonant + vowel)
                                     * @default null
                                     */
                                    pause_mora: {
                                        text: string;
                                        consonant: unknown | string;
                                        consonant_length: unknown | number;
                                        vowel: string;
                                        vowel_length: number;
                                        pitch: number;
                                    } | null;
                                    /**
                                     * @description Whether the phrase is interrogative (question)
                                     * @default false
                                     */
                                    is_interrogative: boolean;
                                }[];
                                /** @description Overall speaking speed */
                                speedScale: number;
                                /** @description Overall pitch */
                                pitchScale?: number;
                                /** @description Overall inflection */
                                intonationScale: number;
                                /** @description Overall volume */
                                volumeScale: number;
                                /** @description Silence length before phoneme */
                                prePhonemeLength: number;
                                /** @description Silence length after phoneme */
                                postPhonemeLength: number;
                                /** @description Output sampling rate of audio data */
                                outputSamplingRate: number;
                                /**
                                 * @description Whether or not to output stereo audio data
                                 * @default false
                                 */
                                outputStereo: boolean;
                                kana: string;
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/voicevox/multi_synthesis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Synthesize multiple texts at once
         * @description Synthesize multiple texts at once. Returns audio wav file.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        speaker: number;
                        /** @default true */
                        enable_interrogative_upspeak: boolean;
                        input: {
                            /** @description List of accented phrases */
                            accent_phrases: {
                                /** @description Mora's List */
                                moras: {
                                    text: string;
                                    consonant: unknown | string;
                                    consonant_length: unknown | number;
                                    vowel: string;
                                    vowel_length: number;
                                    pitch: number;
                                }[];
                                /** @description Accent position */
                                accent: number;
                                /**
                                 * @description Information per mora (consonant + vowel)
                                 * @default null
                                 */
                                pause_mora?: {
                                    text: string;
                                    consonant: unknown | string;
                                    consonant_length: unknown | number;
                                    vowel: string;
                                    vowel_length: number;
                                    pitch: number;
                                } | null;
                                /**
                                 * @description Whether the phrase is interrogative (question)
                                 * @default false
                                 */
                                is_interrogative?: boolean;
                            }[];
                            /** @description Overall speaking speed */
                            speedScale: number;
                            /** @description Overall pitch */
                            pitchScale?: number;
                            /** @description Overall inflection */
                            intonationScale: number;
                            /** @description Overall volume */
                            volumeScale: number;
                            /** @description Silence length before phoneme */
                            prePhonemeLength: number;
                            /** @description Silence length after phoneme */
                            postPhonemeLength: number;
                            /** @description Output sampling rate of audio data */
                            outputSamplingRate: number;
                            /**
                             * @description Whether or not to output stereo audio data
                             * @default false
                             */
                            outputStereo?: boolean;
                            kana: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description The audio's output */
                                audios?: string[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/voicevox/speakers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available speakers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description List of available speakers */
                                speakers?: {
                                    /** @description Speaker id */
                                    id?: string;
                                    /** @description Speaker name in Japanese */
                                    name?: string;
                                    styles?: {
                                        /** @description Speaker id, this is used for synthesis */
                                        id?: string;
                                        /** @description Speaker name in Japanese */
                                        name?: string;
                                    }[];
                                }[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/voicevox/synthesis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Synthesis text to speech
         * @description Synthesis text to speech. Returns audio wav file.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        speaker: number;
                        /** @default true */
                        enable_interrogative_upspeak: boolean;
                        input: {
                            /** @description List of accented phrases */
                            accent_phrases: {
                                /** @description Mora's List */
                                moras: {
                                    text: string;
                                    consonant: unknown | string;
                                    consonant_length: unknown | number;
                                    vowel: string;
                                    vowel_length: number;
                                    pitch: number;
                                }[];
                                /** @description Accent position */
                                accent: number;
                                /**
                                 * @description Information per mora (consonant + vowel)
                                 * @default null
                                 */
                                pause_mora?: {
                                    text: string;
                                    consonant: unknown | string;
                                    consonant_length: unknown | number;
                                    vowel: string;
                                    vowel_length: number;
                                    pitch: number;
                                } | null;
                                /**
                                 * @description Whether the phrase is interrogative (question)
                                 * @default false
                                 */
                                is_interrogative?: boolean;
                            }[];
                            /** @description Overall speaking speed */
                            speedScale: number;
                            /** @description Overall pitch */
                            pitchScale?: number;
                            /** @description Overall inflection */
                            intonationScale: number;
                            /** @description Overall volume */
                            volumeScale: number;
                            /** @description Silence length before phoneme */
                            prePhonemeLength: number;
                            /** @description Silence length after phoneme */
                            postPhonemeLength: number;
                            /** @description Output sampling rate of audio data */
                            outputSamplingRate: number;
                            /**
                             * @description Whether or not to output stereo audio data
                             * @default false
                             */
                            outputStereo?: boolean;
                            kana: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            status: boolean;
                            /** @default success */
                            message: string;
                            result?: {
                                /** @description The audio's output */
                                audios?: string[];
                            };
                        };
                    };
                };
                /** @description Invalid request error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Authorization error */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default false */
                            status: boolean;
                            message: string;
                            result?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
